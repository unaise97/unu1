/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Unaise988 as PrismaUnaise988 } from "@prisma/client";

export class Unaise988ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.Unaise988CountArgs, "select">
  ): Promise<number> {
    return this.prisma.unaise988.count(args);
  }

  async unaise988s(
    args: Prisma.Unaise988FindManyArgs
  ): Promise<PrismaUnaise988[]> {
    return this.prisma.unaise988.findMany(args);
  }
  async unaise988(
    args: Prisma.Unaise988FindUniqueArgs
  ): Promise<PrismaUnaise988 | null> {
    return this.prisma.unaise988.findUnique(args);
  }
  async createUnaise988(
    args: Prisma.Unaise988CreateArgs
  ): Promise<PrismaUnaise988> {
    return this.prisma.unaise988.create(args);
  }
  async updateUnaise988(
    args: Prisma.Unaise988UpdateArgs
  ): Promise<PrismaUnaise988> {
    return this.prisma.unaise988.update(args);
  }
  async deleteUnaise988(
    args: Prisma.Unaise988DeleteArgs
  ): Promise<PrismaUnaise988> {
    return this.prisma.unaise988.delete(args);
  }
}

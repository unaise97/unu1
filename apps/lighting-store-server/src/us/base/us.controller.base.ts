/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { USService } from "../us.service";
import { USCreateInput } from "./USCreateInput";
import { US } from "./US";
import { USFindManyArgs } from "./USFindManyArgs";
import { USWhereUniqueInput } from "./USWhereUniqueInput";
import { USUpdateInput } from "./USUpdateInput";

export class USControllerBase {
  constructor(protected readonly service: USService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: US })
  async createUS(@common.Body() data: USCreateInput): Promise<US> {
    return await this.service.createUs({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [US] })
  @ApiNestedQuery(USFindManyArgs)
  async usItems(@common.Req() request: Request): Promise<US[]> {
    const args = plainToClass(USFindManyArgs, request.query);
    return this.service.usItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: US })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async us(@common.Param() params: USWhereUniqueInput): Promise<US | null> {
    const result = await this.service.us({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: US })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUS(
    @common.Param() params: USWhereUniqueInput,
    @common.Body() data: USUpdateInput
  ): Promise<US | null> {
    try {
      return await this.service.updateUs({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: US })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUS(
    @common.Param() params: USWhereUniqueInput
  ): Promise<US | null> {
    try {
      return await this.service.deleteUs({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
